/**
 * CouchDB connector for express-session by Gelx
 *
 * Based on connect-redis by TJ Holowaychuk <tj@vision-media.ca>
 */
var Nano = require('nano');
var util = require('util');
var debug = require('debug')('express:couchdb');
var noop = function(){};

/**
 * Return the `CouchDBStore` extending `express`'s session Store.
 *
 * @param {object} express session
 * @return {Function}
 * @api public
 */

 module.exports = function (session) {

  /**
   * Express's session Store.
   */

   var Store = session.Store;

  /**
   * Initialize CouchDBStore with the given `options`.
   *
   * @param {Object} options
   * @api public
   */

   function CouchDBStore (options) {
   	if (!(this instanceof CouchDBStore)) {
   		throw new TypeError('Cannot call CouchDBStore constructor as a function');
   	}

   	var self = this;

   	options = options || {};
   	Store.call(this, options);
   	this.prefix = options.prefix == null ? 'sess:' : options.prefix;
   	delete options.prefix;

   	this.serializer = JSON;

    if(options.dbClient) {
      this.client = options.dbClient;
    } else {
      var nanoDB = options.nano; //|| Nano(options.url);
      var db = options.dbName || 'session_store';
      this.client = nanoDB.use(db);
    }


    // logErrors
    if(options.log && typeof options.log ==  'function'){
    	this.log = options.log;
    } else {
    	this.log = function (err) {
    		console.error('Warning: connect-couchdb reported a client error: ' + err);
    	};
    }

    this.client.list(function(err, body) {
      if(err) {
        console.error('SessionStore could not get database-info: ' + err);
      } else {
        var sessns = body.total_rows;
        console.log('SessionStore connected. Found ' + sessns + ' sessions.');
      }
    });
}

  /**
   * Inherit from `Store`.
   */

   util.inherits(CouchDBStore, Store);

  /**
   * Attempt to fetch session by the given `sid`.
   *
   * @param {String} sid
   * @param {Function} fn
   * @api public
   */

   CouchDBStore.prototype.get = function (sid, fn) {
   	var psid = this.prefix + sid;
   	if (!fn) fn = noop;
   	debug('GET "%s"', psid);

   	this.client.get(psid, function (er, data) {
   		if (er) return fn(er);
   		if (!data) return fn();

   		debug('GOT %s', JSON.stringify(data) );

   		return fn(null, data);
   	});
   };

  /**
   * Commit the given `sess` object associated with the given `sid`.
   *
   * @param {String} sid
   * @param {Session} sess
   * @param {Function} fn
   * @api public
   */

   CouchDBStore.prototype.set = function (sid, sess, fn) {
   	var docname = this.prefix + sid;
   	if (!fn) fn = noop;

    debug('SET "%s" %s', docname, JSON.stringify(sess));

   	this.client.insert(sess, docname, function (er, body) {
   		if (er) debug(er);
   		debug('SET complete: ' + JSON.stringify(body));

   		fn.apply(null, arguments);
   	});
   };

  /**
   * Destroy the session associated with the given `sid`.
   *
   * @param {String} sid
   * @api public
   */

   CouchDBStore.prototype.destroy = function (sid, fn) {
   	psid = this.prefix + sid;
   	debug('DEL "%s"', psid);

    client = this.client;

   	client.get(psid, function (er, data) {
   		if (er) return fn(er);
   		if (!data) return fn();

   		var rev = data._rev;

   		client.destroy(psid, rev, fn);
   	});
   };

   return CouchDBStore;
};
